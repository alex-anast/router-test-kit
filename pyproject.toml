[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "router_test_kit"
version = "0.1.3"
description = "A framework for remotely testing routers, physical or virtual."
readme = "README.md"
authors = [
    {name = "Alexandros Anastasiou", email = "anastasioyaa@gmail.com"}
]
license = {text = "MIT"}
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Networking",
]
keywords = ["router", "testing", "network", "automation", "telnet"]

dependencies = [
    "exceptiongroup==1.2.0",
    "importlib-metadata==6.7.0",
    "iniconfig==2.0.0",
    "packaging==23.2",
    "paramiko>=3.0.0",
    "pluggy==1.2.0",
    "pytest==7.4.4",
    "pytest-rerunfailures==13.0",
    "pytest-sugar==1.0.0",
    "termcolor==2.3.0",
    "tomli==2.0.1",
    "typing_extensions==4.7.1",
    "zipp==3.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "types-setuptools",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/alex-anast/virtual-router-test-kit"
Repository = "https://github.com/alex-anast/virtual-router-test-kit"
Documentation = "https://alex-anast.github.io/virtual-router-test-kit/"
Issues = "https://github.com/alex-anast/virtual-router-test-kit/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Ruff configuration
[tool.ruff]
target-version = "py37"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["router_test_kit"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
