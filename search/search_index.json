{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Router Test Kit The motivation for this project is to provide a simple and out-of-the-box, easy-to-use framework for testing (virtual) routers. Initially, the framework was designed to work with OneOS6 routers from OneAccess Networks. It is based on a telnet connection, therefore it is compatible with CISCO routers, Ubuntu Server images etc. For Demo purposes, we use two Ubuntu Server Virtual Machines. See the DEMO section on the front page.","title":"Home"},{"location":"#router-test-kit","text":"The motivation for this project is to provide a simple and out-of-the-box, easy-to-use framework for testing (virtual) routers. Initially, the framework was designed to work with OneOS6 routers from OneAccess Networks. It is based on a telnet connection, therefore it is compatible with CISCO routers, Ubuntu Server images etc. For Demo purposes, we use two Ubuntu Server Virtual Machines. See the DEMO section on the front page.","title":"Router Test Kit"},{"location":"installation/","text":"Installation Steps The project is available on PyPi, so you can install it using pip : python3 -m pip install router-test-kit Alternatively, you can clone the repository and install it locally: git clone git@github.com:alex-anast/router-test-kit.git","title":"Installation"},{"location":"installation/#installation-steps","text":"The project is available on PyPi, so you can install it using pip : python3 -m pip install router-test-kit Alternatively, you can clone the repository and install it locally: git clone git@github.com:alex-anast/router-test-kit.git","title":"Installation Steps"},{"location":"usage/","text":"How to Use Assuming that the prerequisites are met and the installation has been successful, you can start using the test framework right away. Examples For examples, see the ./examples/example1_connect.py and ./examples/example2_ping_between_vms.py files. For a very thorough example showcasing the full capabilities of the test framework, see ./tests/test_ipsec.py . Core Parts of any Test The two most important parts of writing a network setup test are: device.py::Device class: As in the real world, you have to let the test know that you are connection from a HostDevice to a destination device that can be any of the children classes: LinuxDevice , RadiusServer , OneOS6Device , etc. connection.py::Connection class: The connection from the host device to the destination device. For the time being, only one connection is supported, the TelnetConnection . Alongside this, for the case where you need to connect to a device and from there, to jump to a third device, use the TelnetCLIConnection class. This includes several protection mechanisms for the connections to work well together as a group. Script Example The steps that should be taken for establishing and killing a connection are given below: # Register device(s) vm = LinuxDevice(username=\"user\", password=\"password\") # Create a `connection` instance my_connection = TelnetConnection(timeout=10) # Connect to the device using telnet connection = connection.connect( destination_device=vm, destination_ip=\"192.168.10.10\", ) # Perform actions, like ping, execute command on device etc. # Close the connection connection.disconnect()","title":"Usage"},{"location":"usage/#how-to-use","text":"Assuming that the prerequisites are met and the installation has been successful, you can start using the test framework right away.","title":"How to Use"},{"location":"usage/#examples","text":"For examples, see the ./examples/example1_connect.py and ./examples/example2_ping_between_vms.py files. For a very thorough example showcasing the full capabilities of the test framework, see ./tests/test_ipsec.py .","title":"Examples"},{"location":"usage/#core-parts-of-any-test","text":"The two most important parts of writing a network setup test are: device.py::Device class: As in the real world, you have to let the test know that you are connection from a HostDevice to a destination device that can be any of the children classes: LinuxDevice , RadiusServer , OneOS6Device , etc. connection.py::Connection class: The connection from the host device to the destination device. For the time being, only one connection is supported, the TelnetConnection . Alongside this, for the case where you need to connect to a device and from there, to jump to a third device, use the TelnetCLIConnection class. This includes several protection mechanisms for the connections to work well together as a group.","title":"Core Parts of any Test"},{"location":"usage/#script-example","text":"The steps that should be taken for establishing and killing a connection are given below: # Register device(s) vm = LinuxDevice(username=\"user\", password=\"password\") # Create a `connection` instance my_connection = TelnetConnection(timeout=10) # Connect to the device using telnet connection = connection.connect( destination_device=vm, destination_ip=\"192.168.10.10\", ) # Perform actions, like ping, execute command on device etc. # Close the connection connection.disconnect()","title":"Script Example"}]}